name: Build FFmpeg Android
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
permissions:
  contents: write
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, x86, riscv64, armv7, x86_64]
        ffmpeg_static: [false, true]
      fail-fast: false
    env:
      BUILD_DIR: ${{ github.workspace }}/build
      LATEST_GIT: 1
      GIT_LFS_SKIP_SMUDGE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install system dependencies and build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build make autoconf automake libtool pkg-config texinfo gettext gperf bison flex git xz-utils unzip diffutils file findutils coreutils binutils python3 python3-pip python3-venv pipx subversion libtool-bin nasm yasm
      - name: Install pipx and meson
        run: |
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          export PATH="$HOME/.local/bin:$PATH"
          pipx install meson
          meson --version
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install Android NDK (r29 beta4)  
        run: |  
          cd $HOME  
          curl -LO https://dl.google.com/android/repository/android-ndk-r29-beta4-linux.zip  
          unzip android-ndk-r29-beta4-linux.zip  
          mv android-ndk-r29-beta4 $HOME/android-ndk-r29  

          echo "ANDROID_NDK_ROOT=$HOME/android-ndk-r29" >> $GITHUB_ENV  
          echo "ANDROID_NDK_HOME=$HOME/android-ndk-r29" >> $GITHUB_ENV  

          TOOLCHAIN=$HOME/android-ndk-r29/toolchains/llvm/prebuilt/linux-x86_64/bin  
          ln -sf $TOOLCHAIN/aarch64-linux-android29-clang    $TOOLCHAIN/aarch64-linux-android-gcc  
          ln -sf $TOOLCHAIN/armv7a-linux-androideabi29-clang $TOOLCHAIN/arm-linux-androideabi-gcc  
          ln -sf $TOOLCHAIN/x86_64-linux-android29-clang     $TOOLCHAIN/x86_64-linux-android-gcc  
          ln -sf $TOOLCHAIN/i686-linux-android29-clang       $TOOLCHAIN/i686-linux-android-gcc  
 
          echo "$TOOLCHAIN" >> $GITHUB_PATH  
        
      - name: Install binstall    
        run: |    
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash    
          export PATH="$HOME/.cargo/bin:$PATH"    
      - name: Install cargo-c    
        run: |    
          cargo binstall cargo-c --no-confirm    
      - name: Add Rust Android targets    
        if: matrix.arch != 'riscv64'    
        run: |    
          case "${{ matrix.arch }}" in    
            aarch64)    
              rustup target add aarch64-linux-android    
              ;;    
            armv7)    
              rustup target add armv7-linux-androideabi    
              ;;    
            x86)    
              rustup target add i686-linux-android    
              ;;    
            x86_64)    
              rustup target add x86_64-linux-android    
              ;;    
          esac    
      - name: Set ARCH and FFMPEG_STATIC    
        run: |    
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV    
          echo "BUILD_TARGET=android" >> $GITHUB_ENV    
          if [ "${{ matrix.ffmpeg_static }}" == "true" ]; then    
            echo "FFMPEG_STATIC=1" >> $GITHUB_ENV    
          fi    
      - name: Build FFmpeg    
        run: |  
          rm -f ${{ github.workspace }}/git-sources.lock  
          bash ${{ github.workspace }}/build.sh    
        env:     
          ARCH: ${{ matrix.arch }}  
      
      # New step: Upload config.log on build failure
      - name: Upload config.log on failure
        if: failure()
        run: |
          # Find the FFmpeg directory in the build folder
          FFMPEG_DIR=$(find ${{ github.workspace }}/build -type d -name "FFmpeg*" | head -1)
          if [ -n "$FFMPEG_DIR" ] && [ -f "$FFMPEG_DIR/config.log" ]; then
            echo "Found config.log at: $FFMPEG_DIR/config.log"
            
            mkdir -p ${{ github.workspace }}/build-logs
            
            cp "$FFMPEG_DIR/config.log" "${{ github.workspace }}/build-logs/config-${{ matrix.arch }}-${{ matrix.ffmpeg_static }}.log"
            echo "Config log copied successfully"
          else
            echo "config.log not found or FFmpeg directory not found"
            echo "Available directories in build folder:"
            find ${{ github.workspace }}/build -type d -name "*" 2>/dev/null || echo "Build directory not found"
          fi
      
      - name: Upload config logs as artifact on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: config-logs-${{ matrix.arch }}-${{ matrix.ffmpeg_static }}
          path: ${{ github.workspace }}/build-logs/
          if-no-files-found: ignore

      - name: Upload module zip files as artifact    
        uses: actions/upload-artifact@v4    
        with:    
          name: module-zips-${{ matrix.arch }}-${{ matrix.ffmpeg_static }}  
          path: ${{ github.workspace }}/module/*.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Show collected files
        run: ls -R artifacts
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: build-${{ github.run_number }}
          name: "FFmpeg Android Build ${{ github.run_number }}"
          body: |
            ## FFmpeg Android Builds

            - **Dynamic builds** include hardware acceleration support through MediaCodec and OpenCL (if the device supports it).  
            - **Static builds** are completely static and may not support hardware acceleration at all.  
            - **Build ZIPs** can be flashed through Magisk as a Magisk module.  
              
            ### Available Architectures  
            - `arm64-v8a`   
            - `armeabi-v7a`  
            - `x86_64`  
            - `x86`   
            - `riscv64`  

            **To find your device architecture:** run `getprop ro.product.cpu.abi` in a terminal  
                
          files: artifacts/**/*.zip    
        env:    
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
