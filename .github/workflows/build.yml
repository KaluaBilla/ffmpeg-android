name: Build FFmpeg Android
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, x86, riscv64, armv7, x86_64]
      fail-fast: false
    env:
      BUILD_DIR: ${{ github.workspace }}/build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install system dependencies and build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            make \
            autoconf \
            automake \
            libtool \
            pkg-config \
            texinfo \
            gettext \
            gperf \
            bison \
            flex \
            git \
            xz-utils \
            unzip \
            diffutils \
            file \
            findutils \
            coreutils \
            binutils \
            python3 \
            python3-pip \
            python3-venv \
            pipx \
            subversion \
            libtool \
            gperf \
            libtool-bin \
            nasm \
            yasm \
            zip \
            
      - name: Install pipx and meson
        run: |
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          export PATH="$HOME/.local/bin:$PATH"
          pipx install meson
          meson --version
          
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          
      - name: Install Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27d
          add-to-path: true
          
      - name: Install binstall
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
          export PATH="$HOME/.cargo/bin:$PATH"
          
      - name: Install cargo-c
        run: |
          cargo binstall cargo-c --no-confirm
          
      - name: Add Rust Android targets
        if: matrix.arch != 'riscv64'
        run: |
          case "${{ matrix.arch }}" in
            aarch64)
              rustup target add aarch64-linux-android
              ;;
            armv7)
              rustup target add armv7-linux-androideabi
              ;;
            x86)
              rustup target add i686-linux-android
              ;;
            x86_64)
              rustup target add x86_64-linux-android
              ;;
          esac
          
      - name: Set environment variables
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "BUILD_TARGET=android" >> $GITHUB_ENV
          echo "RELEASE_TAG=v1.0.0-${{ github.run_number }}" >> $GITHUB_ENV
          
      - name: Build FFmpeg
        run: bash ${{ github.workspace }}/build.sh
        env:
          ARCH: ${{ matrix.arch }}
          
      - name: Find and upload to release
        run: |
          # Set the release tag
          RELEASE_TAG="v1.0.0-${{ github.run_number }}"
          
          # Create release (will succeed for first job, others will get "already exists" error - that's fine)
          gh release create "$RELEASE_TAG" \
            --title "FFmpeg Android Build ${{ github.run_number }}" \
            --notes "FFmpeg builds for Android architectures" \
            --latest || true
          
          # Find and upload all ZIP files
          find ./module -name "*.zip" -type f | while read zip_file; do
            if [ -f "$zip_file" ]; then
              filename=$(basename "$zip_file")
              echo "Uploading: $filename"
              gh release upload "$RELEASE_TAG" "$zip_file" --clobber
            fi
          done
            
      - name: Find and upload ZIP files
        run: |
          # Find all ZIP files in module folder
          find ./module -name "*.zip" -type f | while read zip_file; do
            if [ -f "$zip_file" ]; then
              filename=$(basename "$zip_file")
              echo "Found ZIP file: $zip_file"
              echo "Uploading as: $filename"
              
              # Upload using gh CLI (simpler than upload-release-asset action)
              gh release upload "${{ env.RELEASE_TAG }}" "$zip_file" --clobber
              
              echo "Successfully uploaded: $filename"
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: v1.0.0-${{ github.run_number }}
